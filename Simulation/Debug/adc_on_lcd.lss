
adc_on_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000250  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080006a  0080006a  000002ee  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000249  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014a  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  8a:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <start_adc>:



	void start_adc()
	{
		sbi(ADCSRA,6);
  92:	36 9a       	sbi	0x06, 6	; 6
	}
  94:	08 95       	ret

00000096 <lcd_cmd>:


//Command sending function.
void lcd_cmd(unsigned char item)
{
	PORTB=item;
  96:	88 bb       	out	0x18, r24	; 24
	rs_0;
  98:	92 98       	cbi	0x12, 2	; 18
	rw_0;
  9a:	93 98       	cbi	0x12, 3	; 18
	en_1;
  9c:	94 9a       	sbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	83 ec       	ldi	r24, 0xC3	; 195
  a0:	99 e0       	ldi	r25, 0x09	; 9
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_cmd+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcd_cmd+0x12>
  a8:	00 00       	nop
	_delay_ms(10);
	en_0;
  aa:	94 98       	cbi	0x12, 4	; 18
	return;
}
  ac:	08 95       	ret

000000ae <lcd_init>:
}


void lcd_init() // Function to initialize LCD
{
	lcd_cmd(0x38);
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_init+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcd_init+0x10>
  be:	00 00       	nop
	_delay_ms(50);
	
	lcd_cmd(0x0E);
  c0:	8e e0       	ldi	r24, 0x0E	; 14
  c2:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_init+0x1c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_init+0x22>
  d0:	00 00       	nop
	_delay_ms(50);
	
	lcd_cmd(0x01);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_init+0x2e>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_init+0x34>
  e2:	00 00       	nop
	_delay_ms(50);
	
	lcd_cmd(0x06);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  ea:	83 ed       	ldi	r24, 0xD3	; 211
  ec:	90 e3       	ldi	r25, 0x30	; 48
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_init+0x40>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_init+0x46>
  f4:	00 00       	nop
	_delay_ms(50);
	
	lcd_cmd(0x80);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  fc:	83 ed       	ldi	r24, 0xD3	; 211
  fe:	90 e3       	ldi	r25, 0x30	; 48
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_init+0x52>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_init+0x58>
 106:	00 00       	nop
	_delay_ms(50);
}
 108:	08 95       	ret

0000010a <complete>:

	int complete()
	{
		if(ADCSRA&TEST(4))
		{
			return(1);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	34 99       	sbic	0x06, 4	; 6
 110:	02 c0       	rjmp	.+4      	; 0x116 <complete+0xc>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		return(0);
	}
 116:	08 95       	ret

00000118 <main>:
int digital_at[8];
unsigned char i;

int main(void)
{
	DDRB=0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
 11c:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;
 11e:	81 bb       	out	0x11, r24	; 17
	DDRA=0x00;
 120:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xFF;	//pulling up
 122:	8b bb       	out	0x1b, r24	; 27
	ADCSRA=0x83;
 124:	83 e8       	ldi	r24, 0x83	; 131
 126:	86 b9       	out	0x06, r24	; 6
	ADMUX=0x40;
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00;
 12c:	15 ba       	out	0x15, r1	; 21
	lcd_init();
 12e:	0e 94 57 00 	call	0xae	; 0xae <lcd_init>
			start_adc();
			while(!complete());
			PORTC=ADCL;
			PORTD=ADCH;
			adc_val=ADC;
			lcd_cmd(0x80);
 132:	cb e4       	ldi	r28, 0x4B	; 75
 134:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_data_string("DISTANCE");
 136:	00 e6       	ldi	r16, 0x60	; 96
 138:	10 e0       	ldi	r17, 0x00	; 0
	{
		// 		ADMUX=0x00;
		// 		for (ch=0;ch<8;ch++)
		// 		{
			// 			ADMUX=0x00+ch;
			start_adc();
 13a:	0e 94 49 00 	call	0x92	; 0x92 <start_adc>
			while(!complete());
 13e:	0e 94 85 00 	call	0x10a	; 0x10a <complete>
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	e1 f3       	breq	.-8      	; 0x13e <main+0x26>
			PORTC=ADCL;
 146:	84 b1       	in	r24, 0x04	; 4
 148:	85 bb       	out	0x15, r24	; 21
			PORTD=ADCH;
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	82 bb       	out	0x12, r24	; 18
			adc_val=ADC;
 14e:	84 b1       	in	r24, 0x04	; 4
 150:	95 b1       	in	r25, 0x05	; 5
 152:	90 93 6d 00 	sts	0x006D, r25
 156:	80 93 6c 00 	sts	0x006C, r24
			lcd_cmd(0x80);
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fe 01       	movw	r30, r28
 160:	09 95       	icall
			lcd_data_string("DISTANCE");
 162:	c8 01       	movw	r24, r16
 164:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_data_string>
			lcd_cmd(0x88);
 168:	88 e8       	ldi	r24, 0x88	; 136
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fe 01       	movw	r30, r28
 16e:	09 95       	icall
			hex_ascii(ADC);
 170:	84 b1       	in	r24, 0x04	; 4
 172:	95 b1       	in	r25, 0x05	; 5
 174:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <hex_ascii>
			if (ADC>MARGIN)
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	95 b1       	in	r25, 0x05	; 5
 17c:	22 e0       	ldi	r18, 0x02	; 2
 17e:	80 30       	cpi	r24, 0x00	; 0
 180:	92 07       	cpc	r25, r18
 182:	10 f0       	brcs	.+4      	; 0x188 <main+0x70>
			{
				sbi(PORTD,5);
 184:	95 9a       	sbi	0x12, 5	; 18
 186:	d9 cf       	rjmp	.-78     	; 0x13a <main+0x22>
			}
			else
			{
				sbi(PORTD,6);
 188:	96 9a       	sbi	0x12, 6	; 18
 18a:	d7 cf       	rjmp	.-82     	; 0x13a <main+0x22>

0000018c <lcd_data>:
}

// DATASENDING FUNCTION
void lcd_data(unsigned char item)
{
	PORTB=item;
 18c:	88 bb       	out	0x18, r24	; 24
	rs_1;
 18e:	92 9a       	sbi	0x12, 2	; 18
	rw_0;
 190:	93 98       	cbi	0x12, 3	; 18
	en_1;
 192:	94 9a       	sbi	0x12, 4	; 18
 194:	83 ec       	ldi	r24, 0xC3	; 195
 196:	99 e0       	ldi	r25, 0x09	; 9
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_data+0xc>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_data+0x12>
 19e:	00 00       	nop
	_delay_ms(10);
	en_0;
 1a0:	94 98       	cbi	0x12, 4	; 18
	return;
}
 1a2:	08 95       	ret

000001a4 <hex_ascii>:
	lcd_cmd(0x80);
	_delay_ms(50);
}

void hex_ascii(unsigned int temp)
{
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	unsigned msb,lsb,middle;
	lsb=temp&0x00F;
 1ae:	8c 01       	movw	r16, r24
 1b0:	0f 70       	andi	r16, 0x0F	; 15
 1b2:	10 70       	andi	r17, 0x00	; 0
	msb=temp&0x0F00;
 1b4:	9c 01       	movw	r18, r24
 1b6:	20 70       	andi	r18, 0x00	; 0
 1b8:	3f 70       	andi	r19, 0x0F	; 15
	middle=temp&0x0F0;
 1ba:	c0 7f       	andi	r28, 0xF0	; 240
 1bc:	d0 70       	andi	r29, 0x00	; 0
	msb=msb>>(8);
 1be:	83 2f       	mov	r24, r19
 1c0:	99 27       	eor	r25, r25
	middle=middle>>(4);
 1c2:	d2 95       	swap	r29
 1c4:	c2 95       	swap	r28
 1c6:	cf 70       	andi	r28, 0x0F	; 15
 1c8:	cd 27       	eor	r28, r29
 1ca:	df 70       	andi	r29, 0x0F	; 15
 1cc:	cd 27       	eor	r28, r29
	
	if(msb>0x09)
 1ce:	8a 30       	cpi	r24, 0x0A	; 10
 1d0:	91 05       	cpc	r25, r1
 1d2:	20 f0       	brcs	.+8      	; 0x1dc <hex_ascii+0x38>
	{
		msb=msb+0x37;
		lcd_data(msb);
 1d4:	89 5c       	subi	r24, 0xC9	; 201
 1d6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_data>
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <hex_ascii+0x3e>
	}
	else
	{
		msb=msb+0x30;
		lcd_data(msb);
 1dc:	80 5d       	subi	r24, 0xD0	; 208
 1de:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_data>
	}
	if(middle>0x09)
 1e2:	ca 30       	cpi	r28, 0x0A	; 10
 1e4:	d1 05       	cpc	r29, r1
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <hex_ascii+0x4e>
	{
		middle=middle+0x37;
		lcd_data(middle);
 1e8:	8c 2f       	mov	r24, r28
 1ea:	89 5c       	subi	r24, 0xC9	; 201
 1ec:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_data>
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <hex_ascii+0x56>
	}
	else
	{
		middle=middle+0x30;
		lcd_data(middle);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	80 5d       	subi	r24, 0xD0	; 208
 1f6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_data>
	}				
	
	if(lsb>0x09)
 1fa:	0a 30       	cpi	r16, 0x0A	; 10
 1fc:	11 05       	cpc	r17, r1
 1fe:	28 f0       	brcs	.+10     	; 0x20a <hex_ascii+0x66>
	{
		lsb=lsb+0x37;
		lcd_data(lsb);
 200:	80 2f       	mov	r24, r16
 202:	89 5c       	subi	r24, 0xC9	; 201
 204:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_data>
 208:	04 c0       	rjmp	.+8      	; 0x212 <hex_ascii+0x6e>
	}
	else
	{
		lsb=lsb+0x30;
		lcd_data(lsb);
 20a:	80 2f       	mov	r24, r16
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_data>
	}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	08 95       	ret

0000021c <lcd_data_string>:
	return;
}


void lcd_data_string(unsigned char *str)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
	i=0;
 222:	10 92 80 00 	sts	0x0080, r1
	while(str[i]!='\0')
 226:	88 81       	ld	r24, Y
 228:	88 23       	and	r24, r24
 22a:	69 f0       	breq	.+26     	; 0x246 <lcd_data_string+0x2a>
	{
		lcd_data(str[i]);
 22c:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_data>
		i++;
 230:	80 91 80 00 	lds	r24, 0x0080
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 80 00 	sts	0x0080, r24


void lcd_data_string(unsigned char *str)
{
	i=0;
	while(str[i]!='\0')
 23a:	fe 01       	movw	r30, r28
 23c:	e8 0f       	add	r30, r24
 23e:	f1 1d       	adc	r31, r1
 240:	80 81       	ld	r24, Z
 242:	88 23       	and	r24, r24
 244:	99 f7       	brne	.-26     	; 0x22c <lcd_data_string+0x10>
	{
		lcd_data(str[i]);
		i++;
	}
	return;
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
